{% if request.design_mode %}
  <h2 class="h2 text-center mb-4 lg:mb-12 font-sec">RECENTLY VIEWED PRODUCTS WILL SHOW HERE</h2>
{% endif %}

<div
  id="recentlyViewed"
  class="recent-products overflow-hidden hidden max-md:mb-[24px] mb-[10px] mt-[24px] lg:mt-[48px]"
>
  {%- if section.settings.heading %}
    <h2 class="text-[30px] leading-[35px] xl:text-[40px] xl:leading-[52px] text-center mb-4 lg:mb-[30px] font-sec">
      {{ section.settings.heading | escape }}
    </h2>
  {% endif -%}

  <div class="container px-4 md:px-12 space-y-5 lg:space-y-8">
    <div
      class="splide asd"
      role="list"
      data-splide='
        {
          "arrows": false,
          "pagination": false,
          "type": "slide",
          "autoWidth": true,
          "focus": 0,
          "gap": "8px",
          "omitEnd": true,
          "perPage": 3,
          "breakpoints": {
            "1023": {
              "gap": "8px",
              "perPage": 3
            },
            "767": {
              "gap": "6px",
              "perPage": 2,
              "perMove": 2
            },
            "640": {
              "gap": "8px",
              "perPage": 1,
              "perMove": 1
            }
          }
        }     
      '
    >
      <div class="splide__track !overflow-visible">
        <div class="recently-viewed-list max-md:[&>div]:w-4/5 sm:[&>div]:w-[calc(50%-6px)] md:[&>div]:w-[calc(100%-2px)] splide__list md:!grid md:grid-cols-3 md:gap-0.5"></div>
      </div>
    </div>
  </div>
</div>

<script>
  (function () {
    const LOCAL_STORAGE_RECENTPRODUCTS_KEY = 'recentlyViewedProducts';
    let productsStored = localStorage.getItem(LOCAL_STORAGE_RECENTPRODUCTS_KEY)?.split(',') ?? [];
    const currentProduct = '{{- product.handle -}}';

    if (productsStored.length === 0 && !currentProduct) return;

    if (productsStored.length === 0) {
      productsStored = currentProduct ? [currentProduct, ...productsStored] : productsStored;
      localStorage.setItem(LOCAL_STORAGE_RECENTPRODUCTS_KEY, productsStored.join(','));
      return;
    }

    productsStored = productsStored.filter((product) => product !== currentProduct && Boolean(product));
    if (productsStored.length > 3) productsStored.length = 3;

    const selectors = {
      productCard: '.product-card',
    };

    const fetchProductCardHTML = (handle) => {
      let productTileTemplateUrl = `/products/${handle}?view=card-mob-large-img`;

      return fetch(productTileTemplateUrl)
        .then((res) => res.text())
        .then((res) => {
          const text = res;
          const parser = new DOMParser();
          const htmlDocument = parser.parseFromString(text, 'text/html');
          const productCard = htmlDocument.documentElement.querySelector(selectors.productCard);
          if (!productCard) return '';
          return '<div class="splide__slide">' + productCard.outerHTML + '</div>';
        })
        .catch((err) => console.error(`[Shopify Recently Viewed] Failed to load content for handle: ${handle}`, err));
    };

    const setupGrid = async (grid) => {
      if (productsStored.length < 1) return;
      const requests = productsStored.map(fetchProductCardHTML);
      const responses = await Promise.all(requests);
      grid.innerHTML = responses.join('');
      grid.closest('#recentlyViewed').classList.remove('hidden');

      // lazy load images
      const lazyimg = new Event('lazyimg');
      window.dispatchEvent(lazyimg);

      const splideRefresh = new Event('spliderefresh');
      window.dispatchEvent(splideRefresh);

      // reinit colour selectors
      const initcolourselector = new Event('initcolourselector');
      window.dispatchEvent(initcolourselector);
    };

    setupGrid(document.querySelector('#recentlyViewed .recently-viewed-list'));
    productsStored = currentProduct !== '' ? [currentProduct, ...productsStored] : productsStored;
    localStorage.setItem(LOCAL_STORAGE_RECENTPRODUCTS_KEY, productsStored.join(','));
  })();
</script>

{% schema %}
{
  "name": "Recent Products",
  "class": "section-recent-products",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "default": "Previously explored",
      "label": "Title"
    }
  ]
}
{% endschema %}
